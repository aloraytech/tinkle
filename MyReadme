THIS FRAMEWORK CURRENTLY UNDER PROGRESS.. DON'T USE IN PRODUCTION

AUTHOR      : KRISHANU BHATTACHARYA
EMAIL       : krishanu.info@gmail.com
FRAMEWORK   : TINKLE
VERSION     : 0.07 DEV
MINIMUM PHP : PHP 7.4
REQUIRED    : COMPOSER FOR AUTOLOAD AND INSTALLING PACKAGES
MOTO        : GIVE AS MUCH CAN MAGIC LIKE LARAVEL, PRE SECURED SYSTEM, MINIMUM DEVELOPMENT TIME, AS MUCH LESS IN
              SIZE AND MEMORY

TODO'S :
1.  REQUEST, RESPONSE, SERVER ETC CLASS CURRENTLY DIRECT DEPEND ON SYMFONY FOUNDATION. BUT FOR MANAGING SEVERAL
    FUNCTIONALITY WE HAVE TO IMPLEMENT OWN REQUEST, RESPONSE CLASSES WHICH WILL BE DIRECT IN RELATION WITH
    SYMFONY HTTP FOUNDATION.
    
2.  DATABASE : CURRENTLY DATABASE , MODELS, DB MODELS ETC MANAGE THIS SYSTEM. BUT IN FUTURE WE NEED TO REFACTORING
    ALL THOSE METHODS. AN SKELETON NEED FOR EACH DATA TABLE, WHICH HELP OUR ORM.

3.  VIEW OR RENDERING : FOR RENDER ANY HTML PAGES WITH DATA, WE HAVE HERE TWO DIFFERENT APPROACH.  ONE IS TWIG
    AND NEXT IS PURE PHP. TWIG CAN BE EASILY GET BY COMPOSER PACKAGES. AND FINAL RENDER SHOULD BE BY TWIG ENGINE.
    WHY PURE PHP APPROACH REQUIRED HERE.. BECAUSE OF DESIGNING CUSTOM TEMPLATE FOR EACH ROUTE.

4.  TOKEN SYSTEM : A STABLE TOKEN SYSTEM REQUIRED FOR OUR SYSTEM. BEST IF TOKEN GENERATE EVERY REFRESH OR PAGE LOAD.

5.  EXCEPTION  : EXCEPTION CLASS CURRENTLY WORKING BUT GIVE SLIDE ERROR ...ONLY IN PHP STORM.

6.  SOCKET AND STREAM : SOCKET NEED FIRST.

7.  HELPER CLASSES :  REQUIRED HELPER CLASS WITH INDEPENDENT FUNCTIONS LIST.

8.  FRONT DESIGNER FOR USER

9.  OWN CSS LIBRARY OR SET A LIBRARY AS BASE LIBRARY LIKE BOOTSTRAP. AVOIDING JQUERY AND TRY TO DO IN VANILLA
    JAVA SCRIPT/VUE JS/REACT JS WITH REACTIVE VALUES AND MOOD.

10. PHP TEST , DIFFERENT ENVIRONMENT, CORE LIBRARIES ETC.

11. Need Closer Class Accessors, For makes thing happen like laravel, But Need To ReWrite Maximum CodeBase
    So, Leave as it is.. After Complete This, Then Rewrite ...


COMPLETES :
1.  CENTRALIZATION : ACCESS EVERY CORE CLASS FROM TINKLE
2.  ROUTER         : A POWERFUL ROUTER, WHERE REQUEST VARIABLES CAN SET IN ROUTER.
3.  EVENT SYSTEM   : A DIRECT TO CALL WITH FULL NAME AND MUSK NAME EVENT SYSTEM.
4.  STRUCTURE      : A FOCUS FRAMEWORK STRUCTURE DESIGN. WORKING STRUCTURE
5.  MIGRATION      : A BASIC DATABASE MIGRATION SYSTEM
6.  HELP CLI       : A TINKLE CLI SYSTEM FOR GET HELP.
7.  AUTOLOADER     : COMPOSER USE FOR AUTOMATING LOADING CLASSES.

Update : 23/07/2021
1. Request Class : Now we can use symfony http foundation class inside our own Request class.
Update : 24/07/2021
1. Response Class : Now we can use symfony http foundation class inside our own Response class.
2. Migration
Update : 25/07/2021
1. Session Class : Now we can use symfony http foundation class inside our own Session class.
2. Schema For Migration
Update : 27/07/2021
1. Tinkle CLI refactoring, colorizing, CLI Handler Implementation



// Update

I think Request Class Have Some Problem. Because File Upload now a mesh... must rewrite everything

Ohh.... Thanks God, I found My Lost Framework, which I built in last year.. Where I already furnished all
Items...  Not let's work...



// Major Update
31July,2021 03:17
I Update and Refactoring a lot... From this study I learn that, Own Framework ... I have to refactoring and refactoring.
But why I still reinvent the wheel..
Only Just because...
Love Laravel Magics But Hate it's Size With Dependencies And Multiple Updates In Short Period (Which is Good, But Not For
 Small Websites, And Every Updates Effect Laravel Project.. ) And Faith On Symfony Http Component and they don't need
 update multiple time in short period.. I think they pre planed everything .. .
I just try to make my framework and laravel... the most of work.. approximately same...

Now We Have Own CLI...with No Dependencies..
Now We Migrate Sql Table And Keep Table Info For Our Models
Make All Request,Response,Session etc extend from abstract classes..
Make Secure Image Upload Also File Upload
Just If The File..is not Plain File..and it is a code ...Image just can't be uploaded...
Image record will be save with hash... and most of Image Data can be pull from One Method Call
Next.. I will be added Exif data For Image...
Image now can be resize,compress,convert....etc with GD Library
Small CLI Framework Implemented with Error Management. Now it's version  is  _version 0.2
Implement   php tinkle make::controller     done
Implement   php tinkle make::model          done
Implement   php tinkle make::migration      done

Implement   php tinkle clear::all           done
Implement   php tinkle clear::logs          done

Logger System Now Available... Try To log everything...
Put RootPath In Server for CLI

Migration Default Table Create with Database Extend Connection.


NOW MY FULL FOCUS ON APP MODELS....
AS MUCH AS CAN IT WILL BE SUPER EASY LIKE LARAVEL MODELS...

CURRENT TOTAL SIZE OF THIS APPLICATION IS 10.5 MB
WHERE COMPOSER/VENDOR KEEPS 1.46 MB AND PUBLIC/RESOURCE/UPLOAD KEEPS ABOVE 9MB

THIS FRAMEWORK TAKES MY TIME TOO.. SO, I TRY TO PULL IT TO READY FOR PRODUCTION MODE..
UNIT TESTING WILL BE IMPLEMENTED SOON..

******************************************************************************************
Update : 31st July Night 2021

Migration Process Done.. But Still Confused with This Error Code


**************************************************************************************
Update News On: 04th August 2021
Happy to say that Now Our View System Can Use Both Php Template System And Twig Template System.
And For Php Template System ...
{{extend('layout/layoutName'}}
{{asset('css/or/js/link')}}
{{url('link/to')}}
{{include('link/to/template/part')}}

DESIGNER TOOLS  FOR CREATING FORMS,DIV,CARD,NAVBAR ETC.  NEED TO MUCH WORKING ON THIS... WORK ON AFTER FINISH MAIN AREA
IN RUNTIME /VIEW/ PHP TEMPLATE GENERATE A FRESH UPDATE VIEW FOR DISPLAY TO CLIENT.
in runtime views folder.. file generate like   requestUrl-templateName.php

in TINKLE CLI  now all temporary files can be remove via clear::all

NEXT TODOS FOR :-
IMAGE MUST BE BASE64 FORMAT
CACHE FOR VIEW
TOKEN GENERATION AND VALIDATE BEFORE CONTROLLER CALL..SOMETHING LIKE IN MIDDLEWARE
AUTH MIDDLEWARE

DB CALLING METHOD

***************************************
05th Aug, 2021 22:12
Config Class

// MANY THNGS ALREADY CHANGED, THUS WHY I STILL NOT UPDATE IN GITHUB
WHAT TO DO : print_r($this->prepareView('homepage')->withModels([$userModel])->responseCode(1234)->contentType('text/html')::getSetupDetails());
Done : Now We Have Two method For Calling Response View Display etc
Method 1...

    $request->setContentType('text/html');
    $this->render('templateName',['Params']);

Method 2...

            $userModel = new UsersModel();
            $this->prepareView('homepage')->withModels([$userModel])->responseCode(243)->contentType('text\html');
            $this->display();



**********************************************************
...
.....
........
**********************************************************
19th September, 2021
I try n try for making template output with layout..
But I missing some concept or confused what the best way to do it..
I build View Or Render System Multiple Time..All Works Good And Codes All Are Tested..
But still not satisfy for make whole job in fixed rules...
So, I am now thinking to shorter the freedom part to make this happen...
I don't know if anybody don't like this approach, but for my view this is OK and good to go on production env.
for doing this..
1. $header->title
2. $header->favicon
3. $header->meta
4. $header->headerBlock
5. $header->CssBlock
like those attributes aka view page attributes must be predefined with usability.
*************************************************************************************************

new Updated Render System Have Theme as A Directory Concept


// Named Router Refactoring

In this approach I try to duplicating entire routes as raw & musk